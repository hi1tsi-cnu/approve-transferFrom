// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.28;

contract MyToken {
    event Transfer(address indexed from, address indexed to, uint256 value);

    string public name;
    string public symbol;
    uint8 public decimals; // unit > 8 bit unsigned int, uint16, ... , uint256

    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) allowance;

    constructor(string memory _name, string memory _symbol, uint8 _decimal) {
        name = _name;
        symbol = _symbol;
        decimals = _decimal;
    }

    constructor(string memory _name, string memory _symbol, uint8 _decimal, uint256 _amount) {
        name = _name;
        symbol = _symbol;
        decimals = _decimal;
        // stransaction
        // from, to, data, value, gas, ...
        _mint(_amount * 10 ** uint256(decimals) , msg.sender); // 1 MT
    }

    function approve(address spender, uint256 amount)  external {
        allowance[msg.sender][spender] = amount;
        emit Approval(spender, amount);
    }

    function transferFrom(address from, address to, uint256 amount) external {
        address spender = msg.sender;
        require(allowance[from][spender] >= amount, "insufficient allowance")
        allowance[from][spender] -= amount;
        balanceOf[from] -= amount;
        balanceOf[to] += amount;
        emit Transfer(from, to, amount);
    }

    function _mint(uint256 amount, address owner) internal {
        // totalSupply += amount;
        // balanceOf[owner] = balanceOf[owner] + amount;
        totalSupply += amount;
        balanceOf[owner] += amount;

        emit Transfer(address(0), owner, amount);
    }

    function transfer(uint256 amount, address to) external {
        require(balanceOf[msg.sender] >= amount, "insufficient balance");
        
        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;

        emit Transfer(msg.sender, to, amount);
    }

    /*
    apprrove
     - allow spender address to send my token
    transferFrom
     - spender: owner > target address

    * token owner > bank contract
    * token owner > router contract > bank contract
    * token owner > router contract > bank contract(multi contract)
    */

    //function totalSupply() external view returns (uint256) {
    //    return totalSupply;
    //}

    //function balanceOf(address owner) external view returns (uint256) {
    //    return balanceOf[owner];
    //}

    //function name() external view returns (string memory) {
    //    return name;
    //}
}
