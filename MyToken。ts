import hre from "hardhat";
import { expect } from "chai";
import { MyToken } from "../typechain-types";
import { HardhatEthersSigner } from "@nomicfoundation/hardhat-ethers/signer";

const mintingAmount = 100n;
const decimals = 18n;

describe("mytoken deploy", () => {
    let MyToken: MyToken;
    let signer: HardhatEthersSigner[];
    beforeEach("should deploy", async () => {
        signer = await hre.ethers.getSigners();
        myTokenC = await hre.ethers.deployContract("MyToken", [
            "MyToken",
            "MT",
            decimals,
            mintingAmount,
        ]);
    });
    describe("Basic state value check", () => {
        it("should return name", async () => {
            expect(await myTokenC.name()).equal("MyToken");
        });
        it("should return symbol", async () => {
            expect(await myTokenC.symbol()).equal("MT");
        });
        it("should return decimals", async () => {
            expect(await myTokenC.decimals()).equal(decimals);
        });
        it("should return 100 totalSupply", async () => {
            expect(await myTokenC.totalSupply()).equal(mintingAmount * 10n ** decimals);
        });
    });

    // 1MT = 1*10^18
    describe("Mint", () => {
        it("should return 1MT balance for signer 0", async () => {
            const signer = await hre.ethers.getSigners();
            expect(await myTokenC.balanceOf(signer[0].address)).equal(
                mintingAmount * 10n ** decimals
            );
        });
    });
    describe("Transfer", () => {
        it("should have 0.5MT", async () => {
            const signer1 = signer[1]
            expect(await myTokenC.transfer(
                hre.ethers.parseUnits("0.5", decimals), 
                signer1.address
            )).to.emit(myTokenC, "Transfer")
            .withArgs(
                signer0.address, 
                signer1.address, 
                hre.ethers.parseUnits("0.5", decimals)
            );
            const receipt = await tx.wait()
            console.log(receipt?.logs)
            expect(await myTokenC.balanceOf(signer1.address)).equal(
                hre.ethers.parseUnits("0.5", decimals)
            );

            //const filter = myTokenC.filters.Transfer(signer0.address);
            //const logs = await myTokenC.queryFilter(filter, 0, "latest");
            //console.log(logs.length);

            //console.log(logs[0].args.from);
            //console.log(logs[0].args.to);
            //console.log(logs[0].args.value);
        });
        it("should be severted with insufficient balance error", async () => {
            const signer1 = signer[1]
            await expect(
                myTokenC.transfer(
                    hre.ethers.parseUnits((mintingAmount + 1n).toString(), decimals), 
                    signer1.address
                )
            ).to.be.revertedWith("insufficient balance");
            //expect(await myTokenC.balanceOf(signer1.address)).equal(
            //    hre.ethers.parseUnits("0.5", 18)
            //);
        });
    });
    describe("TransferFrom", () => {
        it("should emit Approval event", async () => {
            const signer1 = signer[1];
            await expect (
                MyToken.approve(signer1.address, hre.ethers.parseUnits("10", decimals))
            )
                .to.emit(myTokenC, "Approval")
                .withArgs(signer1.address, hre.ethers.parseUnits("10", decimals));
        });
        it("should be reverted with insufficient allowance error", async () => {
            const signer0 = signers[0];
            const signer1 = signers[1];
            myTokenC.connect(signer1).TransferFrom(signer0.address, signer1.address, hre.ethers.parseUnits("1", decimals))
        });
    });

    describe("Assignment (approve & transferFrom)", () => {
        it("should transfer 0.5MT from signer0 to signer1", async () => {
            const signer0 = signers[0];
            const signer1 = signers[1];
            await myTokenC.approve(signer1.address, hre.ethers.parseUnits("10", decimals));
            await expect(myTokenC.connect(signer1).transferFrom(signer0.address, signer1.address, hre.ethers,parseUnits("0.5", decimals)))
            .to.emit(myTokenC, "Transfer").withArgs(signer0.address, signer1.address, hre.ethers.parseUnits("0.5", decimals));
        });
    });
});
